Index: #2Questions 
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/#2Questions  b/#2Questions 
new file mode 100644
--- /dev/null	(date 1756104772576)
+++ b/#2Questions 	(date 1756104772576)
@@ -0,0 +1,97 @@
+#1 How does the rounding when converting float number to integer work
+#Answer: Floats are always rounded downwards :y= 2.7, print(int(y)) gives you 2
+
+#2 Give me two ways to determine the amounts of deciamls in rouded value
+#Answer:
+# by using round and adding ,1 after variable: _pi = 3.14 - print(round(_pi, 1))
+# using f string:_pi =3.14 - print (f"{x:.1f}")
+
+#3 Write a program that calculates Volume V and Area A for a sphere of radius r. Print the values of the variables with a precision of 3 decimal places.
+#Answer:
+import math
+# Be användaren om radien
+r = float(input("Ange radien r: "))
+# Beräkna volym och area
+v = (4 * math.pi * (r ** 3)) / 3
+a = 4 * math.pi * (r ** 2)
+# Skriv ut resultat med 3 decimalers noggrannhet
+print(f"Volymen är: {v:.3f}")
+print(f"Arean är: {a:.3f}")
+
+#4 How can we shorten a= a+1?
+Answer: a+=1 , always + before equal sign
+
+#5 Exercise. Change values to your liking:
+
+print("Think of a number")
+
+magic_number = 47  # Feel free to change this to some other integer
+
+original_number = magic_number  # We need to remember the original value
+
+print("Double the number!")
+# ToDo: Double the magic number
+
+print("Add four!")
+# ToDo: Add four to the magic number
+
+print("Halve the number!")
+# ToDo: Halve the magic number
+
+print("Subtract the original number!")
+# ToDo: Subtract the original number from the magic number
+
+print("I predict that you now have the number 2!")
+print("Let's see if I'm right: " + str(magic_number))
+
+#6 What is "input" used for?
+#Answer: Used to take input from the user during the execution of a program. When the program reaches the input() line, it pauses and waits for the user to type something and press Enter. Whatever the user types gets returned as a string.
+
+#7 How can you shorten this code to only two lines code?
+#data = input("Enter a number: ")
+#data = float(data)                 # Converts string "3.14" that input returns to number 3.14
+#print("The number is ", data)
+#Answer:
+#data = float(input("Enter a number: "))
+#print("The number is ", data)
+
+#8 How can you input multiple data, though input only reads in one string of data?
+#Answer:
+#value1 = input("Skriv in tre värden: ")
+#value2 = input()
+#value3 = input()
+#print("Du skrev in:", value1, value2, value3)
+
+#9 What is split used for, and how to use?
+#Answer: splits one string of text into smaller parts. Used to input multiple values on the same string. Used with pointsyntax.  Can combine split with input.
+# text = "Hello world this is ChatGPT"
+#words = text.split()
+#print(words)
+#Output:
+#['Hello', 'world', 'this', 'is', 'ChatGPT']
+
+#10 How can you combine split with input?
+#Answer:
+# answer = input("Enter three values: ")
+# answer.split() = value1, value2, value3
+# print("You wrote:", value1, value2, value3)
+#eller
+# answer = input("Skriv in tre värden: ").split()
+# print("You wrote:", value1, value2, value3)
+
+#11 what does () in ".slipt()" tell us?
+#Answer: the different values of inputs are separated by blank space
+
+#12 How can you change that?
+#Answer: by specifying the separator inside the parenthesis
+#ex. answer.split(":") # Specify : as separator
+
+#12 For what practical things use split syntax? give example
+# For processing using data of ex. time or date.
+# Ex. Date:
+# answer = input("Enter a time (HH:MM:SS): ")
+# hours, minutes, seconds = answer.split(":")  # Specify ':' as separator
+# print("You entered:", hours, minutes, seconds)
+
+# 13 Exercise: Write a program that lets the user enter their birthdate in the format DD/MM/YYYY. Use input and split. Store the answer in three separate variables. What happens if the user only enters two values, or uses the wrong separator?
+#Answer:
Index: #1Questions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Questions week 1\n\n#1 What is a variable, why is it used?\n#Answer: when you give a name a value, and store that value for later use\n\n#2 How do you differentiate the type of an integer and a string?\n#Answer: An integer is a number, whilst strings are marked with \" and cannot be calculated.\n\n#3 How do you test the type of a variable?\n# Answer: Run       print(type(variable ex.a))\n\n#4 How is \"multiple assignment\" used, give example\n#Answer: Name multiple variables simultaniously.    person1, personb = \"zineb\", \"mariam\"\n\n#5 what is \"end=\" used for?\n#Answer: used during print(\"\", end= \"\") to control what is printed efter the command will appear at the same line\n\n#6 what is the opposit to \"end=\" command\n#Answer: \\n, so each statement prints on a new line. print(\"Hello\\nWorld\\nHow are you?\")\n\n#7 What are these type of characters called, can you give more examples?\n#Answer: Escape characters, ex. \\t inserts like pressing a tab key, \\\\ lets you print one backlash character, \\\" and \\' let you include quotation marks inside strings, \\b backspace deletes one charachter backward, \\a bell - *may play a sound on some systems, /r carriage returs reset the cursor to the beginning of line and prints the word after command again. It keeps printing over the same line, creating an animation-like effect.\n\n#8 What and How is \"input()\" command used?\n#Answer: asks the user to type something, and it stores that input as a string. name = input(\"What is your name? \") print(\"Hello, \" + name + \"!\"). You can use it with int or float to get numbers.\n\n#9 What is an f-string, and how is it used?\n#Answer: Formatted string , tells program to insert VALUE of variable directly inside string using {}. value = 3.14159 print(f\"{value}\")\n\n#10 How do you round numbers with f-strings?\n#Answer: using \":.2f)\" inside the curly bracets. value = 3.14159 ,print(f\"{value:.2f}\"). :.2f means round to 2 decimal places\n\n#11 How do you specify how many space characters the answer is going to be printed out on with f-strings?\n#Answer: using this syntax f\"{value:width}\". ex. print (f\"{name:10}!\") will give you space between name and ! You can also use padding with 0:s for numbers to fill upp space. print (f\"{number:05}\"). Program will use 5 spaces and those not used will be padded with 0:s.\n\n#12 How can allignment symbols to , be used for neater looks?\n#Answer: print(f\"{value:<10}\") — Left-align (default for strings). print(f\"{value:>10}\") — Right-align (default for numbers). print (f\"{value:^10}\") — Center-align.\n\n#13 What does adding \"=\" after variable in f-string do?\n#Answer: prints both the variable name and its value , print (f'{i=}')\n\n#14 What is difference between numerical expressions and numerical operands?\n#Answer:Operands are the values or variables involved in a calculation ex. In 3 + 4, the operands are 3 and 4. An expression is a combination of operands and operators (like +, -, *, /) that produces a value. Together they form an expression.\n\n#15 Why do we need to import the math module, give example of how it works?\n#Answer: there are Pythons built in functions of basic math but for more advanced mathematical operations we need to import the math module. import math - number = 16 - square_root = math.sqrt(number) - print(square_root)\n\n#16 What can we use to skip writing .math all the time?\n#Answer: use: from math import sqrt, pi etc. print(sqrt(16)) ,print(pi)\n\n#17 How can you print empty line in python?\n#Answer: print ()\n\n#18 what is important to remember for shorter code?\n#Answer: use multiple parenthesis print(math.sqrt(math.cos(math.radians(45))))\n\n#19 \"You need to store the \"newer/calculated value of x\" in a variable before using it, so you get the updated verion of x\" Give an example of how its done\n#Answer:\n# wrong version:\n# x = 10\n# x * 2         # You dubbled it, but didn’t store it\n# print(x)\n\n# right version:\n# x = 10\n# dubble_x = x * 2     # Store the updated value back in x\n# print(dubble_x)\n\n#20 print (\"Hello\"+123) gives you error, write a correct version, according to PEP\n#Answer: print(\"Hello\", 123)\n\n#21 What is PEP, and PEP8?\n#Answer: It’s a document that suggests new features, improvements, or guidelines for the Python language. PEP8 tells you how to write clean, readable, and consistent Python code.\n\n#22 Explain the other built in Aritmetical operations: //, ‰ and **\n#Answer:// gives us exact value of a calculation, % give us the remainder after division, ** a number (= to the power of) a second number\n\n#23 How to use // and ‰ together?\n#Answer:Converting minutes to hours and minutes\n# total_minutes = 135\n\n#hours = total_minutes // 60     # 2 hours\n#minutes = total_minutes % 60    # 15 minutes\n\n#print(f\"{hours} hours and {minutes} minutes\")\n\n#24 What does == mean?\n#Answer: == compares values, checks if True or False. It’s different from = which is used for assignment (giving a value to a variable).\n\n#25 What is \"def\" function in Python? And what is it used for?\n#Answer: def is used to define a function. def part1 () tells Python: \"Here starts the code for a function named part1. The () after the function name can hold parameters (inputs), or be empty. Used to To organize code into reusable blocks, To avoid repetition, To make code easier to read and maintain. To run the only desired part type part1() at the end\n\n#26 Program that calculates an items price, incl. tax.. The tax is in percent-format (%) and 25.5% of the items value. The result is printed in a neat way.\n#Answer: see #2Notes.py\n\n#27 Program that reads the inserted number of seconds into a variable called \"time\". Input should be an Integer, representing total number of seconds. The program calculates how many hours,minutes and secondsthis corresponds to. Number of minutes and seconds should be only between 0-59.\n#Answer: see #2Notes.py\n\n#28 Explain the \"random\" module, and how it is used. random, randint, choice, shuffle\n#Answer: It’s a built-in Python module that lets you generate random numbers or make random choices. Useful for games, simulations, testing, and anywhere you need unpredictability.\n# First import ramdom\n#random.uniform (a,b) gives random number between a<x<b\n#random.randint (a,b) gives random integer number a<x<b\n#random.shuffle (lis) shuffles the elements in the list lis\n#random.sample (sek,n) gives a list with n numbers of random elements from sequence sek\n\n#29 What is an augmented assignment\n#Answer: It’s a shortcut way to update the value of a variable by combining an operation and assignment in one step. Instead of writing something like x = x + 5, you can write x += 5.\n#x = 10\n#x += 5      # Same as x = x + 5\n#print(x)    # Outputs 15\n\n#30 What does it mean that Python is an dynamically typed language\n#Answer: variables don´t have a fixed type. The type of the value a variable holds is determined at runtime. The type of x can change during the program.\n# x= 5       x is an integer\n# x= \"hello\"        x is now a string\n\n#31 What is pyright in Python used for?\n#Answer : is a typechecker, controls if the types used in program correctly. By running > pyright filename.py
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/#1Questions.py b/#1Questions.py
--- a/#1Questions.py	(revision df4bbeefae3528c9a709f1a9e54ff5e0a5804909)
+++ b/#1Questions.py	(date 1756094690863)
@@ -116,4 +116,7 @@
 # x= "hello"        x is now a string
 
 #31 What is pyright in Python used for?
-#Answer : is a typechecker, controls if the types used in program correctly. By running > pyright filename.py
\ No newline at end of file
+#Answer : is a typechecker, controls if the types used in program correctly. By running > pyright filename.py
+
+print("zineb", end= " ")
+print("mariam")
\ No newline at end of file
